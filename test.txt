
(fl-interp '(f (g 2) (g 1)) '( (f (X Y) = (+ X Y)) (g (X) = (+ 1 X)) )) ; > 5
(fl-interp '(f 0 (g 1)) '( (f (X Y) = (if (eq X 0) 0 Y)) (g (X) = (+ X (g (+ X 1)))) )) ; normal > 0 , applicative > ...
(fl-interp '(count (1 2 3)) '( (count (L) = (if (null L) 0 (+ 1 (count (rest L))))) )) ; > 3
(fl-interp '(xmap plus1 (1 2 3)) '( (plus1 (x) = (+ 1 x)) (xmap (f L) = (if (null L) nil (cons (f (car L)) (xmap f (cdr L))))) )) ; > (2 3 4)

(fl-interp '(+ 1 2) nil) ; > 3
(fl-interp '(f (f 2)) '( (f (X) = (* X X)) )) ; > 16
(fl-interp '(a (+ 1 2)) '( (a (X) = (+ X 1)) )) ; > 4
(fl-interp '(b (+ 1 2)) '( (b (X) = (+ X 1)) )) ; > 4
(fl-interp '(h (g 5)) '( (g (X) = (g (g X))) (h (X) = 1 ) )) ; normal > 1 , applicative > ...

(set 'E '(reverse (1 2 3)))
(set 'P '((reverse (X) = (if (null X) nil (append (reverse (rest X)) (cons (first X) nil)))) (append (X Y) = (if (null X) Y (cons (first X) (append (rest X) Y))))))
(fl-interp E P) ; > (3 2 1)

(fl-interp '(rest (1 2 (3))) nil) ; > (2 (3))
(fl-interp '(rest (p 1 2 (3))) nil) ; > (1 2 (3))
(fl-interp '(first (rest (1 (2 3)))) nil) ; > (2 3)
(fl-interp '(eq (< 3 4) (eq (+ 3 4) (- 2 3))) nil) ; > nil
(fl-interp '(if (> 1 0) (+ 1 2) (+ 2 3)) nil) ; > 3
(fl-interp '(if (> 1 0) (if (eq 1 2) 3 4) 5)  nil) ; > 4
(fl-interp '(cons (first (1 2 3))  (cons a nil)) nil) ; > (1 a)
(fl-interp '(and (or T  nil) (> 3 4)) nil) ; > nil
(fl-interp '(eq (1 2 3) (1 2 3)) nil) ; > nil
(fl-interp '(equal (1 2 3) (1 2 3)) nil) ; > T

(fl-interp '(last (s u p)) '((last (x) = (if (null (rest x)) (first x) (last (rest x)))))) ; > p
(fl-interp '(push (1 2 3) 4) '((push (x y) = (if (null x) (cons y nil) (cons (first x) (push (rest x) y)))))) ; > (1 2 3 4)
(fl-interp '(pop (1 2 3)) '((pop (x) = (if (atom (rest (rest x))) (cons (first x) nil) (cons (first x) (pop (rest x))))))) ; > (1 2)
(fl-interp '(power 4 2) '((power (x y) = (if (= y 1) x (power (* x x) (- y 1)))))) ; > 16
(fl-interp '(factorial 4) '((factorial (x) = (if (= x 1) 1 (* x (factorial (- x 1))))))) ; > 24
(fl-interp '(divide 24 4) '((divide (x y) = (div x y 0)) (div (x y z) = (if (> (* y z) x) (- z 1) (div x y (+ z 1)))))) ; > 6

